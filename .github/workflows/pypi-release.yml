name: PyPI Release

on:
  pull_request:
    types:
      - closed

jobs:
  check_version:
    name: Determine Next Version
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.determine-version.outputs.new_version }}
      version_changed: ${{ steps.determine-version.outputs.version_changed }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: python -m pip install tomli

      - name: Determine next version
        id: determine-version
        run: |
          # Extract the branch prefix from the PR's base ref
          branch="${{ github.event.pull_request.head.ref }}"
          echo "Branch: $branch"

          # Get current version from pyproject.toml for fallback
          cat > get_version.py << 'EOL'
          import tomli

          with open("pyproject.toml", "rb") as f:
              data = tomli.load(f)
              print(data["project"]["version"])
          EOL

          CURRENT_VERSION=$(python get_version.py)
          echo "Current version in pyproject.toml: $CURRENT_VERSION"

          # Get latest tag
          git fetch --tags
          # Check if any tags exist
          if git tag -l "v*" | grep -q .; then
            latest_tag=$(git tag -l "v*" | sort -V | tail -n 1)
          else
            latest_tag="v$CURRENT_VERSION"
            echo "No existing tags found, using current version from pyproject.toml"
          fi
          echo "Latest tag: $latest_tag"

          # Remove 'v' prefix
          latest_version=${latest_tag#v}
          echo "Latest version: $latest_version"

          # Split version into components
          IFS='.' read -r major minor patch <<< "$latest_version"

          # Ensure we have valid numeric values
          major=${major:-0}
          minor=${minor:-1}
          patch=${patch:-0}

          echo "Current components: major=$major, minor=$minor, patch=$patch"

          # Default to no change
          version_changed=false

          # Determine new version based on branch prefix
          if [[ $branch == "feature/"* ]]; then
            minor=$((minor + 1))
            patch=0
            version_changed=true
            echo "Feature branch - incrementing minor version"
          elif [[ $branch == "bugfix/"* || $branch == "hotfix/"* ]]; then
            patch=$((patch + 1))
            version_changed=true
            echo "Bugfix/hotfix branch - incrementing patch version"
          elif [[ $branch == "major/"* ]]; then
            major=$((major + 1))
            minor=0
            patch=0
            version_changed=true
            echo "Major branch - incrementing major version"
          else
            # No version change for other branch types (docs, chore, etc.)
            echo "Branch prefix '$branch' does not affect versioning"
          fi

          new_version="$major.$minor.$patch"
          echo "New version: $new_version"

          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "version_changed=$version_changed" >> $GITHUB_OUTPUT

  update_version:
    name: Update Version in Files
    needs: check_version
    if: needs.check_version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: python -m pip install tomli

      - name: Update version in pyproject.toml
        run: |
          NEW_VERSION="${{ needs.check_version.outputs.new_version }}"
          echo "Updating pyproject.toml to version $NEW_VERSION"

          # Use Python to update version in pyproject.toml
          cat > update_version.py << 'EOL'
          import tomli
          import tomli_w
          import sys

          # Get new version from command line
          new_version = sys.argv[1]

          # Read pyproject.toml
          with open("pyproject.toml", "rb") as f:
              data = tomli.load(f)

          # Update version
          data["project"]["version"] = new_version

          # Write updated data back
          with open("pyproject.toml", "wb") as f:
              tomli_w.dump(data, f)
          EOL

          # Install tomli-w if needed
          python -m pip install tomli-w

          # Update the version
          python update_version.py "$NEW_VERSION"

      - name: Commit and push version change
        run: |
          NEW_VERSION="${{ needs.check_version.outputs.new_version }}"
          git add pyproject.toml
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push --tags

  release:
    name: Build and Release
    needs: [check_version, update_version]
    # Run for version changes OR for the special fix branch
    if: |
      needs.check_version.outputs.version_changed == 'true' ||
      github.event.pull_request.head.ref == 'chore/fix-version-release'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine setuptools wheel pytest pytest-cov
          pip install -e .[dev]

      - name: Run tests
        run: pytest

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check_version.outputs.new_version }}
          name: Release v${{ needs.check_version.outputs.new_version }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
